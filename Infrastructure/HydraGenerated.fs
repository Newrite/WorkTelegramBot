// This code was generated by `SqlHydra.Sqlite` -- v1.0.0.0.
namespace WorkTelegram.HydraGenerated

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        

module main =
    [<CLIMutable>]
    type chat_id_table = { chat_id: int64 }

    type chat_id_tableReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
        member __.chat_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "chat_id")
        member __.Read() = { chat_id = __.chat_id.Read() }

        member __.ReadIfNotNull() =
            if __.chat_id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type deletion_items =
        { deletion_id: int64
          item_name: string
          item_serial: Option<string>
          item_mac: Option<string>
          count: int64
          date: int64
          is_deletion: bool
          is_hidden: bool
          to_location: Option<string>
          office_id: int64
          chat_id: int64 }

    type deletion_itemsReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
        member __.deletion_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "deletion_id")
        member __.item_name = RequiredColumn(reader, getOrdinal, reader.GetString, "item_name")
        member __.item_serial = OptionalColumn(reader, getOrdinal, reader.GetString, "item_serial")
        member __.item_mac = OptionalColumn(reader, getOrdinal, reader.GetString, "item_mac")
        member __.count = RequiredColumn(reader, getOrdinal, reader.GetInt64, "count")
        member __.date = RequiredColumn(reader, getOrdinal, reader.GetInt64, "date")
        member __.is_deletion = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "is_deletion")
        member __.is_hidden = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "is_hidden")
        member __.to_location = OptionalColumn(reader, getOrdinal, reader.GetString, "to_location")
        member __.office_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "office_id")
        member __.chat_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "chat_id")

        member __.Read() =
            { deletion_id = __.deletion_id.Read()
              item_name = __.item_name.Read()
              item_serial = __.item_serial.Read()
              item_mac = __.item_mac.Read()
              count = __.count.Read()
              date = __.date.Read()
              is_deletion = __.is_deletion.Read()
              is_hidden = __.is_hidden.Read()
              to_location = __.to_location.Read()
              office_id = __.office_id.Read()
              chat_id = __.chat_id.Read() }

        member __.ReadIfNotNull() =
            if __.deletion_id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type employer =
        { chat_id: int64
          first_name: string
          last_name: string
          is_approved: bool
          office_id: int64 }

    type employerReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
        member __.chat_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "chat_id")
        member __.first_name = RequiredColumn(reader, getOrdinal, reader.GetString, "first_name")
        member __.last_name = RequiredColumn(reader, getOrdinal, reader.GetString, "last_name")
        member __.is_approved = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "is_approved")
        member __.office_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "office_id")

        member __.Read() =
            { chat_id = __.chat_id.Read()
              first_name = __.first_name.Read()
              last_name = __.last_name.Read()
              is_approved = __.is_approved.Read()
              office_id = __.office_id.Read() }

        member __.ReadIfNotNull() =
            if __.chat_id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type manager =
        { chat_id: int64
          firt_name: string
          last_name: string }

    type managerReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
        member __.chat_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "chat_id")
        member __.firt_name = RequiredColumn(reader, getOrdinal, reader.GetString, "firt_name")
        member __.last_name = RequiredColumn(reader, getOrdinal, reader.GetString, "last_name")

        member __.Read() =
            { chat_id = __.chat_id.Read()
              firt_name = __.firt_name.Read()
              last_name = __.last_name.Read() }

        member __.ReadIfNotNull() =
            if __.chat_id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type office =
        { office_id: int64
          office_name: string
          is_hidden: bool
          manager_id: int64 }

    type officeReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
        member __.office_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "office_id")
        member __.office_name = RequiredColumn(reader, getOrdinal, reader.GetString, "office_name")
        member __.is_hidden = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "is_hidden")
        member __.manager_id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "manager_id")

        member __.Read() =
            { office_id = __.office_id.Read()
              office_name = __.office_name.Read()
              is_hidden = __.is_hidden.Read()
              manager_id = __.manager_id.Read() }

        member __.ReadIfNotNull() =
            if __.office_id.IsNull() then None else Some(__.Read())

type HydraReader(reader: System.Data.Common.DbDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazymainchat_id_table = lazy (main.chat_id_tableReader (reader, buildGetOrdinal 1))
    let lazymaindeletion_items = lazy (main.deletion_itemsReader (reader, buildGetOrdinal 11))
    let lazymainemployer = lazy (main.employerReader (reader, buildGetOrdinal 5))
    let lazymainmanager = lazy (main.managerReader (reader, buildGetOrdinal 3))
    let lazymainoffice = lazy (main.officeReader (reader, buildGetOrdinal 4))
    member __.``main.chat_id_table`` = lazymainchat_id_table.Value
    member __.``main.deletion_items`` = lazymaindeletion_items.Value
    member __.``main.employer`` = lazymainemployer.Value
    member __.``main.manager`` = lazymainmanager.Value
    member __.``main.office`` = lazymainoffice.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "main.chat_id_table", false -> __.``main.chat_id_table``.Read >> box
        | "main.chat_id_table", true -> __.``main.chat_id_table``.ReadIfNotNull >> box
        | "main.deletion_items", false -> __.``main.deletion_items``.Read >> box
        | "main.deletion_items", true -> __.``main.deletion_items``.ReadIfNotNull >> box
        | "main.employer", false -> __.``main.employer``.Read >> box
        | "main.employer", true -> __.``main.employer``.ReadIfNotNull >> box
        | "main.manager", false -> __.``main.manager``.Read >> box
        | "main.manager", true -> __.``main.manager``.ReadIfNotNull >> box
        | "main.office", false -> __.``main.office``.Read >> box
        | "main.office", true -> __.``main.office``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: System.Data.Common.DbDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
            if isOpt 
            then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box 
        

        if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<System.Single> then Some(wrap reader.GetDouble)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<byte> then Some(wrap reader.GetByte)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<byte []> then Some(wrap reader.GetValue)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.DateOnly> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<System.TimeOnly> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else None

    static member Read(reader: System.Data.Common.DbDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                then t.GenericTypeArguments.[0], true
                else t, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
